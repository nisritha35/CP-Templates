// Author: D. Nisritha Reddy 
// Ref: https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/ 

// computeLPSArray -> compute longest proper prefix which is also a suffix (proper prefix ie., prefix != s)
// len -> length of lps of s[0:i]
// KMPSearch returns the occurences of pat in txt -> TC: O(N + M)

void computeLPSArray(string& pat, int M, vector<int>& lps){
    
    int len = 0, i = 1; lps[0] = 0;
    while (i < M) {
       if (pat[i] == pat[len]) { len++; lps[i] = len; i++; }
       else{
          if (len != 0) { len = lps[len - 1]; }
          else { lps[i] = 0; i++; }
       }  
    }
}

vector<int> KMPSearch(string& pat, string& txt){
    
    int M = pat.length(), N = txt.length();
    
    vector<int> lps(M), result;
    computeLPSArray(pat, M, lps);

    int i = 0, j = 0; 
    while ((N - i) >= (M - j)) {
        if (pat[j] == txt[i]) { j++; i++;}
        if (j == M){ result.push_back(i - j + 1); j = lps[j - 1]; }
        else if (i < N && pat[j] != txt[i]) {
            if (j != 0) j = lps[j - 1];
            else i = i + 1;
        }
    }
    return result;
}