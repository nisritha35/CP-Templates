// Author: D. Nisritha Reddy
// Rabin Karp implementation using two hash values to reduce collision

class RabinKarp{
    
    public:
    int mod1 = (int)(1e9 + 7), mod2 = (int)(1e9 + 9);
    int p1 = 31, p2 = 37;

    int power(int x, int y, int mod){
        if(y==0)return 1;
        int p = power(x, y/2, mod);
        if(y&1)return (x*((p*p)%mod))%mod;
        return (p*p)%mod;
    }

    pair<int, int> hash(string &s, int i = 0, int j = -1){
         
        int n = s.length();
        if(j==-1)j = n-1;
        long long hash1 = 0, hash2 = 0;
        for(int idx = i ; idx <= j ; idx++){
            hash1 = ((hash1*p1)%mod1 + (s[idx]-'a' + 1))%mod1;
            hash2 = ((hash2*p2)%mod2 + (s[idx]-'a' + 1))%mod2;
        }
        return {hash1, hash2};
    }

    // Returns Prefix hashes of string 

    vector<pair<int, int>> prefHash(string &s, int i = 0, int j = -1){
        vector<pair<int, int>>res;
        int n = s.length();
        if(j==-1)j = n-1;
        long long hash1 = 0, hash2 = 0;
        for(int idx = i ; idx <= j; idx++){
            hash1 = ((hash1*p1)%mod1 + (s[idx]-'a' + 1))%mod1;
            hash2 = ((hash2*p2)%mod2 + (s[idx]-'a' + 1))%mod2;
            res.push_back({hash1, hash2});
        }
        return res;
    }
    
    // Given prefix hash of string s, returns the hash value of s[i:j]

    pair<int, int> rangeHash(vector<pair<int, int>>&pre, int i = 0, int j = -1){
           int n = pre.size();
           if(j==-1)j = n-1;
           pair<int, int>res;
           if(i==0)return pre[j];
           int sub1 = ( (pre[i-1].first*1ll)*power(p1, (j-i+1),mod1) )%mod1;
           int sub2 = ( (pre[i-1].second*1ll)*power(p2, (j-i+1),mod2) )%mod2;
           res.first = (pre[j].first - sub1 + mod1)%mod1;
           res.second = (pre[j].second - sub2 + mod2)%mod2;
           return res;
    }

};