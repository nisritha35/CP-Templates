/* Author: D. Nisritha Reddy */ 

#include<bits/stdc++.h>
using namespace std;

class DisjointSet {

    vector <int> rank, parent, size;

public:

    DisjointSet(int n){

        rank.resize(n+1,0);
        parent.resize(n+1,0);
        size.resize(n+1,1);

        for(int i = 0 ; i<=n; i++){
            parent[i] = i;
        }
    }

    int findUpar(int node){
       if(parent[node]==node){
            return node;
       }
       else{
          int p = findUpar(parent[node]);
          return parent[parent[node]] = parent[node] = p;
       }
    }

    void unionByRank ( int u, int v){

        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);

        if(ulp_u == ulp_v) return;

        if(rank[ulp_v] < rank[ulp_u]){
              
              parent[ulp_v] = ulp_u;
            
        }
        else {
             parent[ulp_u] = ulp_v;

             if(rank[ulp_u]==rank[ulp_v]){

                  rank[ulp_v]++;
             }
        }
    }

    void unionBySize ( int u, int v){

        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);

        if(ulp_u == ulp_v) return;

        if(size[ulp_v] < size[ulp_u]){
              
              parent[ulp_v] = ulp_u;
              size[ulp_u]+=size[ulp_v];
            
        }
        else {

             parent[ulp_u] = ulp_v;
             size[ulp_v] += size[ulp_u];

        }
    }
};
