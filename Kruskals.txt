/* Author: D. Nisritha Reddy */

#include<bits/stdc++.h>
using namespace std;

class DisjointSet {
public:
    vector <int> rank, parent, size;
    DisjointSet(int n){
        rank.resize(n+1,0);
        parent.resize(n+1,0);
        size.resize(n+1,1);

        for(int i = 0 ; i<=n; i++){
            parent[i] = i;
        }
    }
    int findUpar(int node){
       if(parent[node]==node){
            return node;
       }
       else{
          int p = findUpar(parent[node]);
          return parent[parent[node]] = parent[node] = p;
       }
    }
    void unionByRank ( int u, int v){
        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);

        if(ulp_u == ulp_v) return;

        if(rank[ulp_v] < rank[ulp_u]){
              parent[ulp_v] = ulp_u;
        }
        else {
             parent[ulp_u] = ulp_v;
             if(rank[ulp_u]==rank[ulp_v]){
                  rank[ulp_v]++;
             }
        }
    }

    void unionBySize ( int u, int v){
        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_v] < size[ulp_u]){
              parent[ulp_v] = ulp_u;
              size[ulp_u]+=size[ulp_v];
        }
        else {
             parent[ulp_u] = ulp_v;
             size[ulp_v] += size[ulp_u];
        }
    }
};


class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.

    int spanningTree(int V, vector<vector<int>> adj[])
    {
        vector<int>vis(V,0);
        vector <pair<int, pair<int,int>> > pq;
        for(int i = 0; i< V; i++){
            for(auto it : adj[i]){
                pq.push_back({it[1],{i,it[0]}});
            }
        }   
        sort(pq.begin(),pq.end());
        int ans = 0;
        
        DisjointSet ds(V);
        
        for(int i = 0; i < pq.size(); i++){
            int n1 = pq[i].second.first;
            int n2 = pq[i].second.second;
            int wt = pq[i].first;
            if(ds.parent[n1] != ds.parent[n2]){  
                ans+=wt;
                ds.unionByRank(n1,n2);
            }
        }
        return ans;
    }
};

int main(){

    #ifndef ONLINE_JUDGE  
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    int t; cin>>t;
    while(t--){
        int V, E;
        cin>>V>>E;
        vector<vector<int>>adj[V];
        int i =0; 
        while(i++<E){
            int u,v,w;
            cin>>u>>v>>w;
            vector<int>t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[v].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[u].push_back(t2);
        }
        Solution obj;
        cout<<obj.spanningTree(V, adj)<<"\n";
    }
    return 0;
}